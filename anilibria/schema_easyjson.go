// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package anilibria

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria(in *jlexer.Lexer, out *apiErrorDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			out.Code = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria(out *jwriter.Writer, in apiErrorDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v apiErrorDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v apiErrorDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *apiErrorDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *apiErrorDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria(l, v)
}
func easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria1(in *jlexer.Lexer, out *apiError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(apiErrorDetails)
				}
				(*out.Error).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria1(out *jwriter.Writer, in apiError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Error\":"
		out.RawString(prefix[1:])
		if in.Error == nil {
			out.RawString("null")
		} else {
			(*in.Error).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v apiError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v apiError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *apiError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *apiError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria1(l, v)
}
func easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria2(in *jlexer.Lexer, out *TorrentSeries) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Firest":
			out.Firest = int(in.Int())
		case "Last":
			out.Last = int(in.Int())
		case "String":
			out.String = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria2(out *jwriter.Writer, in TorrentSeries) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Firest\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Firest))
	}
	{
		const prefix string = ",\"Last\":"
		out.RawString(prefix)
		out.Int(int(in.Last))
	}
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix)
		out.String(string(in.String))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TorrentSeries) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TorrentSeries) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TorrentSeries) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TorrentSeries) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria2(l, v)
}
func easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria3(in *jlexer.Lexer, out *TorrentQuality) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "String":
			out.String = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "Resolution":
			out.Resolution = string(in.String())
		case "Encoder":
			out.Encoder = string(in.String())
		case "lq_audio":
			if m, ok := out.LqAudio.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.LqAudio.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.LqAudio = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria3(out *jwriter.Writer, in TorrentQuality) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix[1:])
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Resolution\":"
		out.RawString(prefix)
		out.String(string(in.Resolution))
	}
	{
		const prefix string = ",\"Encoder\":"
		out.RawString(prefix)
		out.String(string(in.Encoder))
	}
	{
		const prefix string = ",\"lq_audio\":"
		out.RawString(prefix)
		if m, ok := in.LqAudio.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.LqAudio.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.LqAudio))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TorrentQuality) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TorrentQuality) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TorrentQuality) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TorrentQuality) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria3(l, v)
}
func easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria4(in *jlexer.Lexer, out *TorrentMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Hash":
			out.Hash = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Announce":
			if in.IsNull() {
				in.Skip()
				out.Announce = nil
			} else {
				in.Delim('[')
				if out.Announce == nil {
					if !in.IsDelim(']') {
						out.Announce = make([]string, 0, 4)
					} else {
						out.Announce = []string{}
					}
				} else {
					out.Announce = (out.Announce)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Announce = append(out.Announce, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_timestamp":
			out.CreatedTimestamp = uint64(in.Uint64())
		case "files_list":
			if in.IsNull() {
				in.Skip()
				out.FilesList = nil
			} else {
				in.Delim('[')
				if out.FilesList == nil {
					if !in.IsDelim(']') {
						out.FilesList = make([]*MetadataFile, 0, 8)
					} else {
						out.FilesList = []*MetadataFile{}
					}
				} else {
					out.FilesList = (out.FilesList)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *MetadataFile
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(MetadataFile)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.FilesList = append(out.FilesList, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria4(out *jwriter.Writer, in TorrentMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Hash\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Announce\":"
		out.RawString(prefix)
		if in.Announce == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Announce {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_timestamp\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CreatedTimestamp))
	}
	{
		const prefix string = ",\"files_list\":"
		out.RawString(prefix)
		if in.FilesList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.FilesList {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TorrentMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TorrentMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TorrentMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TorrentMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria4(l, v)
}
func easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria5(in *jlexer.Lexer, out *Titles) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Titles, 0, 8)
			} else {
				*out = Titles{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 *Title
			if in.IsNull() {
				in.Skip()
				v7 = nil
			} else {
				if v7 == nil {
					v7 = new(Title)
				}
				(*v7).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria5(out *jwriter.Writer, in Titles) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			if v9 == nil {
				out.RawString("null")
			} else {
				(*v9).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Titles) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Titles) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Titles) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Titles) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria5(l, v)
}
func easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria6(in *jlexer.Lexer, out *TitleType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "full_string":
			out.FullString = string(in.String())
		case "Code":
			out.Code = int(in.Int())
		case "String":
			out.String = string(in.String())
		case "Series":
			if m, ok := out.Series.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Series.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Series = in.Interface()
			}
		case "Length":
			out.Length = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria6(out *jwriter.Writer, in TitleType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"full_string\":"
		out.RawString(prefix[1:])
		out.String(string(in.FullString))
	}
	{
		const prefix string = ",\"Code\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix)
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"Series\":"
		out.RawString(prefix)
		if m, ok := in.Series.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Series.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Series))
		}
	}
	{
		const prefix string = ",\"Length\":"
		out.RawString(prefix)
		out.Int(int(in.Length))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TitleType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TitleType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TitleType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TitleType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria6(l, v)
}
func easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria7(in *jlexer.Lexer, out *TitleTorrents) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Series":
			if in.IsNull() {
				in.Skip()
				out.Series = nil
			} else {
				if out.Series == nil {
					out.Series = new(TorrentSeries)
				}
				(*out.Series).UnmarshalEasyJSON(in)
			}
		case "List":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]*TitleTorrent, 0, 8)
					} else {
						out.List = []*TitleTorrent{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *TitleTorrent
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(TitleTorrent)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.List = append(out.List, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria7(out *jwriter.Writer, in TitleTorrents) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Series\":"
		out.RawString(prefix[1:])
		if in.Series == nil {
			out.RawString("null")
		} else {
			(*in.Series).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"List\":"
		out.RawString(prefix)
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.List {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TitleTorrents) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TitleTorrents) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TitleTorrents) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TitleTorrents) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria7(l, v)
}
func easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria8(in *jlexer.Lexer, out *TitleTorrent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "torrent_id":
			out.TorrentId = int(in.Int())
		case "Series":
			if in.IsNull() {
				in.Skip()
				out.Series = nil
			} else {
				if out.Series == nil {
					out.Series = new(TorrentSeries)
				}
				(*out.Series).UnmarshalEasyJSON(in)
			}
		case "Quality":
			if in.IsNull() {
				in.Skip()
				out.Quality = nil
			} else {
				if out.Quality == nil {
					out.Quality = new(TorrentQuality)
				}
				(*out.Quality).UnmarshalEasyJSON(in)
			}
		case "Leechers":
			out.Leechers = int(in.Int())
		case "Seeders":
			out.Seeders = int(in.Int())
		case "Downloads":
			out.Downloads = int(in.Int())
		case "total_size":
			out.TotalSize = int64(in.Int64())
		case "Url":
			out.Url = string(in.String())
		case "uploaded_timestamp":
			out.UploadedTimestamp = uint64(in.Uint64())
		case "Hash":
			out.Hash = string(in.String())
		case "Metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(TorrentMetadata)
				}
				(*out.Metadata).UnmarshalEasyJSON(in)
			}
		case "RawBase64File":
			if m, ok := out.RawBase64File.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.RawBase64File.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.RawBase64File = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria8(out *jwriter.Writer, in TitleTorrent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"torrent_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TorrentId))
	}
	{
		const prefix string = ",\"Series\":"
		out.RawString(prefix)
		if in.Series == nil {
			out.RawString("null")
		} else {
			(*in.Series).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Quality\":"
		out.RawString(prefix)
		if in.Quality == nil {
			out.RawString("null")
		} else {
			(*in.Quality).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Leechers\":"
		out.RawString(prefix)
		out.Int(int(in.Leechers))
	}
	{
		const prefix string = ",\"Seeders\":"
		out.RawString(prefix)
		out.Int(int(in.Seeders))
	}
	{
		const prefix string = ",\"Downloads\":"
		out.RawString(prefix)
		out.Int(int(in.Downloads))
	}
	{
		const prefix string = ",\"total_size\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalSize))
	}
	{
		const prefix string = ",\"Url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"uploaded_timestamp\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.UploadedTimestamp))
	}
	{
		const prefix string = ",\"Hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"Metadata\":"
		out.RawString(prefix)
		if in.Metadata == nil {
			out.RawString("null")
		} else {
			(*in.Metadata).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"RawBase64File\":"
		out.RawString(prefix)
		if m, ok := in.RawBase64File.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.RawBase64File.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.RawBase64File))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TitleTorrent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TitleTorrent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TitleTorrent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TitleTorrent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria8(l, v)
}
func easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria9(in *jlexer.Lexer, out *TitleStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "String":
			out.String = string(in.String())
		case "Code":
			out.Code = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria9(out *jwriter.Writer, in TitleStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix[1:])
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"Code\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TitleStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TitleStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TitleStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TitleStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria9(l, v)
}
func easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria10(in *jlexer.Lexer, out *TitleSchedule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Day":
			out.Day = int(in.Int())
		case "List":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]*Title, 0, 8)
					} else {
						out.List = []*Title{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *Title
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(Title)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.List = append(out.List, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria10(out *jwriter.Writer, in TitleSchedule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Day\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Day))
	}
	{
		const prefix string = ",\"List\":"
		out.RawString(prefix)
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.List {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TitleSchedule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TitleSchedule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TitleSchedule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TitleSchedule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria10(l, v)
}
func easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria11(in *jlexer.Lexer, out *TitleNames) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Ru":
			out.Ru = string(in.String())
		case "En":
			out.En = string(in.String())
		case "Alternative":
			out.Alternative = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria11(out *jwriter.Writer, in TitleNames) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Ru\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ru))
	}
	{
		const prefix string = ",\"En\":"
		out.RawString(prefix)
		out.String(string(in.En))
	}
	{
		const prefix string = ",\"Alternative\":"
		out.RawString(prefix)
		out.String(string(in.Alternative))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TitleNames) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TitleNames) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TitleNames) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TitleNames) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria11(l, v)
}
func easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria12(in *jlexer.Lexer, out *Title) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = int(in.Int())
		case "Code":
			out.Code = string(in.String())
		case "Updated":
			out.Updated = uint64(in.Uint64())
		case "last_change":
			out.LastChange = uint64(in.Uint64())
		case "Names":
			if in.IsNull() {
				in.Skip()
				out.Names = nil
			} else {
				if out.Names == nil {
					out.Names = new(TitleNames)
				}
				(*out.Names).UnmarshalEasyJSON(in)
			}
		case "Status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(TitleStatus)
				}
				(*out.Status).UnmarshalEasyJSON(in)
			}
		case "Type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(TitleType)
				}
				(*out.Type).UnmarshalEasyJSON(in)
			}
		case "Torrents":
			if in.IsNull() {
				in.Skip()
				out.Torrents = nil
			} else {
				if out.Torrents == nil {
					out.Torrents = new(TitleTorrents)
				}
				(*out.Torrents).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria12(out *jwriter.Writer, in Title) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"Code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"Updated\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Updated))
	}
	{
		const prefix string = ",\"last_change\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.LastChange))
	}
	{
		const prefix string = ",\"Names\":"
		out.RawString(prefix)
		if in.Names == nil {
			out.RawString("null")
		} else {
			(*in.Names).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		if in.Status == nil {
			out.RawString("null")
		} else {
			(*in.Status).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		if in.Type == nil {
			out.RawString("null")
		} else {
			(*in.Type).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Torrents\":"
		out.RawString(prefix)
		if in.Torrents == nil {
			out.RawString("null")
		} else {
			(*in.Torrents).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Title) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Title) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Title) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Title) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria12(l, v)
}
func easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria13(in *jlexer.Lexer, out *MetadataFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "File":
			out.File = string(in.String())
		case "Size":
			out.Size = uint64(in.Uint64())
		case "Offset":
			out.Offset = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria13(out *jwriter.Writer, in MetadataFile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"File\":"
		out.RawString(prefix[1:])
		out.String(string(in.File))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Size))
	}
	{
		const prefix string = ",\"Offset\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Offset))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetadataFile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetadataFile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComMindHunter86AniliSeederAnilibria13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetadataFile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetadataFile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComMindHunter86AniliSeederAnilibria13(l, v)
}
